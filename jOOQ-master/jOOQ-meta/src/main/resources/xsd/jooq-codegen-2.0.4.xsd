<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
    xmlns:tns="http://www.jooq.org/xsd/jooq-codegen-2.0.4.xsd"
    targetNamespace="http://www.jooq.org/xsd/jooq-codegen-2.0.4.xsd"
    elementFormDefault="qualified">

    <element name="configuration">
        <complexType>
            <all>
                <!--
                  The JDBC configuration element contains information about how
                  to set up the database connection used for source code generation
                  -->
                <element name="jdbc" type="tns:Jdbc" minOccurs="1"
                    maxOccurs="1" />

                <!--
                  The GENERATOR configuration element contains information about
                  source code generation itself
                  -->
                <element name="generator" type="tns:Generator" minOccurs="1"
                    maxOccurs="1" />
            </all>
        </complexType>
    </element>

    <complexType name="Jdbc">
        <all>
            <!-- The JDBC driver -->
            <element name="driver" type="string" minOccurs="1" maxOccurs="1" />

            <!-- The JDBC connection URL -->
            <element name="url" type="string" minOccurs="1" maxOccurs="1" />

            <!-- Deprecated. Use database schema configuration elements instead -->
            <element name="schema" type="string" minOccurs="0" maxOccurs="1" />

            <!--
              The JDBC connection user. Be sure this user has all required
              GRANTs to the dictionary views/tables to generate the desired artefacts
              -->
            <element name="user" type="string" minOccurs="0" maxOccurs="1" />

            <!-- The JDBC connection password -->
            <element name="password" type="string" minOccurs="0" maxOccurs="1" />
        </all>
    </complexType>

    <complexType name="Generator">
        <all>
            <!--
             The class used to generate source code. You may override this with
             your custom source code generator
             -->
            <element name="name" type="string" default="org.jooq.util.DefaultGenerator"
                minOccurs="0" maxOccurs="1" />

            <!-- The naming strategy used for class and field names -->
            <element name="strategy" type="tns:Strategy" minOccurs="0" maxOccurs="1" />

            <!-- The jooq-meta configuration -->
            <element name="database" type="tns:Database" minOccurs="1" maxOccurs="1" />

            <!-- The jooq-codegen configuration -->
            <element name="generate" type="tns:Generate" minOccurs="0" maxOccurs="1" />

            <!-- Some information about generation output -->
            <element name="target" type="tns:Target" minOccurs="0" maxOccurs="1" />
        </all>
    </complexType>

    <complexType name="Strategy">
        <all>
            <!--
              The class used to provide a naming strategy for generated source
              code. You may override this with your custom naming strategy
              -->
            <element name="name" type="string" minOccurs="0" maxOccurs="1"
                default="org.jooq.util.DefaultGeneratorStrategy" />
        </all>
    </complexType>

    <complexType name="Database">
        <all>
            <!--
              The database dialect from jooq-meta. Available dialects are
              named org.util.[database].[database]Database. Known values are:

              org.jooq.util.ase.ASEDatabase
              org.jooq.util.db2.DB2Database
              org.jooq.util.derby.DerbyDatabase
              org.jooq.util.h2.H2Database
              org.jooq.util.hsqldb.HSQLDBDatabase
              org.jooq.util.ingres.IngresDatabase
              org.jooq.util.mysql.MySQLDatabase
              org.jooq.util.oracle.OracleDatabase
              org.jooq.util.postgres.PostgresDatabase
              org.jooq.util.sqlite.SQLiteDatabaes
              org.jooq.util.sqlserver.SQLServerDatabase
              org.jooq.util.sybase.SybaseDatabase

              You can also provide your own org.jooq.util.Database implementation
              here, if your database is currently not supported
              -->
            <element name="name" type="string" minOccurs="1" maxOccurs="1" />

            <!--
              All elements that are generated from your schema (several Java
              regular expressions, separated by comma) Watch out for
              case-sensitivity. Depending on your database, this might be
              important! You can create case-insensitive regular expressions
              using this syntax: (?i:expr)A comma-separated list of regular
              expressions
              -->
            <element name="includes" type="string" default=".*" minOccurs="0" maxOccurs="1" />

            <!--
              All elements that are excluded from your schema (several Java
              regular expressions, separated by comma). Excludes match before
              includes
              -->
            <element name="excludes" type="string" default="" minOccurs="0" maxOccurs="1" />

            <!--
              Generate java.sql.Timestamp fields for DATE columns. This is
              particularly useful for Oracle databases
              -->
            <element name="dateAsTimestamp" type="boolean" default="false" minOccurs="0" maxOccurs="1" />

            <!--
              Generate jOOU data types for your unsigned data types, which are
              not natively supported in Java
              -->
            <element name="unsignedTypes" type="boolean" default="true" minOccurs="0" maxOccurs="1" />

            <!--
              The schema that is used locally as a source for meta information.
              This could be your development schema or the production schema, etc
              This cannot be combined with the schemata element.
              For backwards compatibility, this defaults to jdbc/schema
              -->
            <element name="inputSchema" type="string" default="" minOccurs="0" maxOccurs="1" />

            <!--
              The schema that is used in generated source code. This will be the
              production schema. Use this to override your local development
              schema name for source code generation. If not specified, this
              will be the same as the input-schema.
              -->
            <element name="outputSchema" type="string" default="" minOccurs="0" maxOccurs="1" />

            <!--
              A configuration element to configure several input and/or output
              schemata for jooq-meta, in case you're using jooq-meta in a multi-
              schema environment
              -->
            <element name="schemata" type="tns:Schemata" minOccurs="0" maxOccurs="1"/>

            <!--
              A configuration element to configure master data table enum classes
              -->
            <element name="masterDataTables" type="tns:MasterDataTables" minOccurs="0" maxOccurs="1"/>

            <!--
              A configuration element to configure synthetic enum types
              This is EXPERIMENTAL functionality. Use at your own risk
              -->
            <element name="enumTypes" type="tns:EnumTypes" minOccurs="0" maxOccurs="1"/>

            <!--
              A configuration element to configure type overrides for generated
              artefacts (e.g. in combination with enumTypes)
              This is EXPERIMENTAL functionality. Use at your own risk
              -->
            <element name="forcedTypes" type="tns:ForcedTypes" minOccurs="0" maxOccurs="1"/>
        </all>
    </complexType>

    <complexType name="Schemata">
        <sequence>
            <!--
              A configuration element for a single schema in multi-schema
              environments
              -->
            <element name="schema" type="tns:Schema" minOccurs="1" maxOccurs="unbounded"/>
        </sequence>
    </complexType>

    <complexType name="Schema">
        <all>
            <!-- See also database/inputSchema -->
            <element name="inputSchema" type="string" default="" minOccurs="1" maxOccurs="1" />

            <!-- See also database/outputSchema -->
            <element name="outputSchema" type="string" default="" minOccurs="0" maxOccurs="1" />
        </all>
    </complexType>

    <complexType name="MasterDataTables">
        <sequence>
            <!-- A configuration element for a master data table -->
            <element name="masterDataTable" type="tns:MasterDataTable" minOccurs="0" maxOccurs="unbounded" />
        </sequence>
    </complexType>

    <complexType name="EnumTypes">
        <sequence>
            <!-- A configuration element for a synthetic enum type -->
            <element name="enumType" type="tns:EnumType" minOccurs="0" maxOccurs="unbounded" />
        </sequence>
    </complexType>

    <complexType name="ForcedTypes">
        <sequence>
            <!-- A configuration element for a forced type override -->
            <element name="forcedType" type="tns:ForcedType" minOccurs="0" maxOccurs="unbounded" />
        </sequence>
    </complexType>

    <complexType name="MasterDataTable">
        <all>
            <!-- The name of a master data table -->
            <element name="name" type="string" minOccurs="1" maxOccurs="1" />

            <!-- The column used for enum literals -->
            <element name="literal" type="string" minOccurs="0" maxOccurs="1" />

            <!-- The column used for documentation -->
            <element name="description" type="string" minOccurs="0" maxOccurs="1" />
        </all>
    </complexType>

    <complexType name="EnumType">
        <all>
            <!-- The name of the synthetic enum type -->
            <element name="name" type="string" minOccurs="1" maxOccurs="1" />

            <!-- A comma separated (CSV format) list of enum literals -->
            <element name="literals" type="string" minOccurs="1" maxOccurs="1" />
        </all>
    </complexType>

    <complexType name="ForcedType">
        <all>
            <!-- The name of the type to be forced upon various artefacts -->
            <element name="name" type="string" minOccurs="1" maxOccurs="1" />

            <!--
              A comma-separated list of Java regular expressions matching
              columns, parameters, attributes, etc to be forced to have this
              type
              -->
            <element name="expressions" type="string" minOccurs="1" maxOccurs="1" />
        </all>
    </complexType>

    <complexType name="Generate">
        <all>
            <!--
              Primary key / foreign key relations should be generated and used.
              This is a prerequisite for various advanced features
              -->
            <element name="relations" type="boolean" default="false" minOccurs="0" maxOccurs="1" />

            <!--
              Generate navigation methods to navigate foreign key relationships
              directly from Record classes. This is only relevant if relations
              is set to true, too
              -->
            <element name="navigationMethods" type="boolean" default="true" minOccurs="0" maxOccurs="1" />

            <!-- Generate deprecated code for backwards compatibility -->
            <element name="deprecated" type="boolean" default="true" minOccurs="0" maxOccurs="1" />

            <!--
              Generate instance fields in your tables, as opposed to static
              fields. This simplifies aliasing
              -->
            <element name="instanceFields" type="boolean" default="true" minOccurs="0" maxOccurs="1" />

            <!--
              Generate the javax.annotation.Generated annotation to indicate
              jOOQ version used for source code
              -->
            <element name="generatedAnnotation" type="boolean" default="true" minOccurs="0" maxOccurs="1" />

            <!--
              Generate POJOs in addition to Record classes for usage of the
              ResultQuery.fetchInto(Class) API
              -->
            <element name="pojos" type="boolean" default="false" minOccurs="0" maxOccurs="1" />

            <!--
              Annotate POJOs and Records with JPA annotations for increased
              compatibility and better integration with JPA/Hibernate, etc
              -->
            <element name="jpaAnnotations" type="boolean" default="false" minOccurs="0" maxOccurs="1" />
        </all>
    </complexType>

    <complexType name="Target">
        <all>
            <!--
              The destination package of your generated classes (within the
              destination directory)
              -->
            <element name="packageName" type="string" default="org.jooq.generated" minOccurs="0" maxOccurs="1" />

            <!-- The destination directory of your generated classes -->
            <element name="directory" type="string" default="target/generated-sources/jooq" />
        </all>
    </complexType>
</schema>