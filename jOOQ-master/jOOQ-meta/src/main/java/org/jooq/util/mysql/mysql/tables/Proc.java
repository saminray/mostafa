/**
 * This class is generated by jOOQ
 */
package org.jooq.util.mysql.mysql.tables;

/**
 * This class is generated by jOOQ.
 *
 * Stored Procedures
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.3.0" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Proc extends org.jooq.impl.TableImpl<org.jooq.Record> {

	private static final long serialVersionUID = 684136539;

	/**
	 * The singleton instance of <code>mysql.proc</code>
	 */
	public static final org.jooq.util.mysql.mysql.tables.Proc PROC = new org.jooq.util.mysql.mysql.tables.Proc();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<org.jooq.Record> getRecordType() {
		return org.jooq.Record.class;
	}

	/**
	 * The column <code>mysql.proc.db</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, java.lang.String> DB = createField("db", org.jooq.impl.SQLDataType.CHAR.length(64).nullable(false).defaulted(true), PROC);

	/**
	 * The column <code>mysql.proc.name</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, java.lang.String> NAME = createField("name", org.jooq.impl.SQLDataType.CHAR.length(64).nullable(false).defaulted(true), PROC);

	/**
	 * The column <code>mysql.proc.type</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, org.jooq.util.mysql.mysql.enums.ProcType> TYPE = createField("type", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(org.jooq.util.mysql.mysql.enums.ProcType.class), PROC);

	/**
	 * The column <code>mysql.proc.specific_name</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, java.lang.String> SPECIFIC_NAME = createField("specific_name", org.jooq.impl.SQLDataType.CHAR.length(64).nullable(false).defaulted(true), PROC);

	/**
	 * The column <code>mysql.proc.language</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, org.jooq.util.mysql.mysql.enums.ProcLanguage> LANGUAGE = createField("language", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(org.jooq.util.mysql.mysql.enums.ProcLanguage.class), PROC);

	/**
	 * The column <code>mysql.proc.sql_data_access</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, org.jooq.util.mysql.mysql.enums.ProcSqlDataAccess> SQL_DATA_ACCESS = createField("sql_data_access", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(org.jooq.util.mysql.mysql.enums.ProcSqlDataAccess.class), PROC);

	/**
	 * The column <code>mysql.proc.is_deterministic</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, org.jooq.util.mysql.mysql.enums.ProcIsDeterministic> IS_DETERMINISTIC = createField("is_deterministic", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(org.jooq.util.mysql.mysql.enums.ProcIsDeterministic.class), PROC);

	/**
	 * The column <code>mysql.proc.security_type</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, org.jooq.util.mysql.mysql.enums.ProcSecurityType> SECURITY_TYPE = createField("security_type", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(org.jooq.util.mysql.mysql.enums.ProcSecurityType.class), PROC);

	/**
	 * The column <code>mysql.proc.param_list</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, byte[]> PARAM_LIST = createField("param_list", org.jooq.impl.SQLDataType.BLOB.length(65535).nullable(false), PROC);

	/**
	 * The column <code>mysql.proc.returns</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, byte[]> RETURNS = createField("returns", org.jooq.impl.SQLDataType.BLOB.nullable(false), PROC);

	/**
	 * The column <code>mysql.proc.body</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, byte[]> BODY = createField("body", org.jooq.impl.SQLDataType.BLOB.nullable(false), PROC);

	/**
	 * The column <code>mysql.proc.definer</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, java.lang.String> DEFINER = createField("definer", org.jooq.impl.SQLDataType.CHAR.length(77).nullable(false).defaulted(true), PROC);

	/**
	 * The column <code>mysql.proc.created</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, java.sql.Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), PROC);

	/**
	 * The column <code>mysql.proc.modified</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, java.sql.Timestamp> MODIFIED = createField("modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), PROC);

	/**
	 * The column <code>mysql.proc.sql_mode</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, java.lang.String> SQL_MODE = createField("sql_mode", org.jooq.impl.SQLDataType.VARCHAR.length(478).nullable(false).defaulted(true), PROC);

	/**
	 * The column <code>mysql.proc.comment</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, java.lang.String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.CLOB.length(65535).nullable(false), PROC);

	/**
	 * The column <code>mysql.proc.character_set_client</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, java.lang.String> CHARACTER_SET_CLIENT = createField("character_set_client", org.jooq.impl.SQLDataType.CHAR.length(32), PROC);

	/**
	 * The column <code>mysql.proc.collation_connection</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, java.lang.String> COLLATION_CONNECTION = createField("collation_connection", org.jooq.impl.SQLDataType.CHAR.length(32), PROC);

	/**
	 * The column <code>mysql.proc.db_collation</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, java.lang.String> DB_COLLATION = createField("db_collation", org.jooq.impl.SQLDataType.CHAR.length(32), PROC);

	/**
	 * The column <code>mysql.proc.body_utf8</code>. 
	 */
	public static final org.jooq.TableField<org.jooq.Record, byte[]> BODY_UTF8 = createField("body_utf8", org.jooq.impl.SQLDataType.BLOB, PROC);

	/**
	 * No further instances allowed
	 */
	private Proc() {
		super("proc", org.jooq.util.mysql.mysql.Mysql.MYSQL);
	}
}
